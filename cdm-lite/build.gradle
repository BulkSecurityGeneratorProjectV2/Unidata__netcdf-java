description = 'Lightweight server for testing'
ext.title = 'CDM-lite'
ext.url = 'https://www.unidata.ucar.edu/software/tds/'

apply plugin: 'war'

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java-library.gradle"
apply from: "$rootDir/gradle/any/gretty.gradle"

dependencies {
  api enforcedPlatform(project(':netcdf-java-platform'))
  api enforcedPlatform('org.springframework:spring-framework-bom:5.3.4')
  testImplementation enforcedPlatform(project(':netcdf-java-testing-platform'))

  api project(':cdm:cdm-core')
  api project(':httpservices')
  api project(':opendap')

  compile 'com.google.guava:guava'
  compile 'org.jdom:jdom2'
  compile 'com.google.code.findbugs:jsr305'
  compile 'org.slf4j:slf4j-api'

  compile "org.springframework:spring-core"
  compile "org.springframework:spring-context"
  compile "org.springframework:spring-beans"
  compile "org.springframework:spring-web"
  compile "org.springframework:spring-webmvc"

  runtime 'org.slf4j:slf4j-api'
  runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'

  testImplementation project(':cdm-test-utils')
  testImplementation 'com.google.truth:truth'

  testImplementation 'pl.pragmatists:JUnitParams'
  testRuntimeOnly 'ch.qos.logback:logback-classic'

  testCompile "javax.servlet:javax.servlet-api:3.1.0"
  testCompile "org.springframework:spring-test"
}

war {
  // Assert that no servlet-api JAR is slated for inclusion in the WAR.
  doFirst {
    File servletApiJar = classpath.find { it.name.contains('servlet-api') }
    if (servletApiJar) {
      // This will fail the build.
      throw new GradleException("Found a servlet-api JAR in the WAR classpath: ${servletApiJar.name}")
    }
  }

  // Replace '$projectVersion' and '$buildTimestamp' placeholders with the correct values.
  // Currently, we only use those placeholders in tds.properties and README.txt.
  def properties = [:]
  properties['projectVersion'] = project.version
  properties['buildTimestamp'] = project.buildTimestamp  // Defined in root project.

  // War CopySpec already includes everything in 'src/main/webapp', which tds.properties lives within.
  // So, the from() and into() methods aren't needed.
  filesMatching('**/tds.properties') {
    expand properties
  }

  from('README.txt') {
    into 'docs'
    expand properties
  }
}

// make the cdm-lite server available for tests
import org.akhikhl.gretty.AppBeforeIntegrationTestTask
import org.akhikhl.gretty.AppAfterIntegrationTestTask

task('AppWarBeforeIntegrationTest', type: AppBeforeIntegrationTestTask) {
  inplace = false
  integrationTestTask 'test'
}
task('AppWarAfterIntegrationTest', type: AppAfterIntegrationTestTask) {
  integrationTestTask 'test'
}

AppWarBeforeIntegrationTest.dependsOn assemble
AppWarAfterIntegrationTest.mustRunAfter AppWarBeforeIntegrationTest

gretty {
  httpPort = 8080
  contextPath = '/'
}
